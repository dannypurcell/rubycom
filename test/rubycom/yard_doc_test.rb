require "#{File.dirname(__FILE__)}/../../lib/rubycom/yard_doc.rb"

require "#{File.dirname(__FILE__)}/util_test_module.rb"
require "#{File.dirname(__FILE__)}/util_test_composite.rb"
require "#{File.dirname(__FILE__)}/util_test_no_singleton.rb"

require 'test/unit'

class SourcesTest < Test::Unit::TestCase

  def test_document_commands
    test_commands = {UtilTestComposite=>
                         {:UtilTestModule=>
                              {:source=>
                                   "require \"\#{File.expand_path(File.dirname(__FILE__))}/../../lib/rubycom.rb\"\n# A command module used for testing\n#\n#This module contains most of the test case input methods.\nmodule UtilTestModule\n\n  # A test non-command method\n  def non_command\n    puts 'fail'\n  end\n\n  # A basic test command\n  def self.test_command\n    puts 'command test'\n  end\n\n  def self.test_command_no_docs\n    puts 'command test'\n  end\n\n  # A test_command with one arg\n  #\n  # @param [String] test_arg a test argument\n  def self.test_command_with_arg(test_arg)\n    \"test_arg=\#{test_arg}\"\n  end\n\n  # A test_command with an arg named arg\n  #\n  # @param [String] arg a test argument whose parameter name is arg\n  def self.test_command_arg_named_arg(arg)\n    \"arg=\#{arg}\"\n  end\n\n  # A test_command with two args\n  # @param [String] test_arg a test argument\n  # @param [String] another_test_arg another test argument\n  def self.test_command_with_args(test_arg, another_test_arg)\n    puts \"test_arg=\#{test_arg},another_test_arg=\#{another_test_arg}\"\n  end\n\n  # A test_command with an optional argument\n  # @param [String] test_arg a test argument\n  # @param [String] test_option an optional test argument\n  def self.test_command_with_options(test_arg, test_option='option_default')\n    puts \"test_arg=\#{test_arg},test_option=\#{test_option}\"\n  end\n\n  # A test_command with all optional arguments\n  # @param [String] test_arg an optional test argument\n  # @param [String] test_option another optional test argument\n  def self.test_command_all_options(test_arg='test_arg_default', test_option='test_option_default')\n    puts \"Output is test_arg=\#{test_arg},test_option=\#{test_option}\"\n  end\n\n  # A test_command with an options array\n  # @param [String] test_option an optional test argument\n  # @param [Array] test_options an optional array of arguments\n  def self.test_command_options_arr (\n      test_option='test_option_default',\n          *test_options\n  )\n    puts \"Output is test_option=\#{test_option},test_option_arr=\#{test_options}\"\n  end\n\n  # A test_command with a return argument\n  #\n  # @param [String] test_arg a test argument\n  # @param [Integer] test_option_int an optional test argument which happens to be an Integer\n  # @return [Array] an array including both params if test_option_int != 1\n  # @return [String] a the first param if test_option_int == 1\n  def self.test_command_with_return(test_arg, test_option_int=1)\n    ret = [test_arg, test_option_int]\n    if test_option_int == 1\n      ret = test_arg\n    end\n    ret\n  end\n\n  # A test_command with a Timestamp argument and an unnecessarily long description which should overflow when\n  # it tries to line up with other descriptions.\n  #\n  # some more stuff\n  #\n  # @param [Timestamp] test_time a test Timestamp argument\n  # @return [Hash] a hash including the given argument\n  def self.test_command_arg_timestamp(test_time)\n    {test_time: test_time}\n  end\n\n  # A test_command with a Boolean argument\n  # @param [Boolean] test_flag a test Boolean argument\n  # @return [Boolean] the flag passed in\n  def self.test_command_arg_false(test_flag=false)\n    test_flag\n  end\n\n  # A test_command with an array argument\n  #\n  # @param [Array] test_arr an Array test argument\n  def self.test_command_arg_arr(test_arr=[])\n    test_arr\n  end\n\n  # A test_command with an Hash argument\n  # @param [Hash] test_hash a Hash test argument\n  def self.test_command_arg_hash(test_hash={})\n    test_hash\n  end\n\n  # A test_command with several mixed options\n  def self.test_command_mixed_options(test_arg, test_arr=[], test_opt='test_opt_arg', test_hsh={}, test_bool=true, *test_rest)\n    \"test_arg=\#{test_arg} test_arr=\#{test_arr} test_opt=\#{test_opt} test_hsh=\#{test_hsh} test_bool=\#{test_bool} test_rest=\#{test_rest}\"\n  end\n\n  include Rubycom\nend\n",
                               :type=>:module},
                          :UtilTestNoSingleton=>{:source=>"", :type=>:module},
                          :test_composite_command=>
                              {:source=>
                                   "# A test_command in a composite console\n#\n# @param [String] test_arg a test argument\n# @return [String] the test arg\n  def self.test_composite_command(test_arg)\n    test_arg\n  end\n",
                               :type=>:command}}}
    result = Rubycom::YardDoc.document_commands(test_commands)
    expected = {UtilTestComposite=>
                    {:UtilTestModule=>
                         {:documentation=>
                              {:commands=>
                                   [{:full_doc=>"A test non-command method",
                                     :name=>:non_command,
                                     :parameters=>[],
                                     :path=>"UtilTestModule#non_command",
                                     :scope=>:instance,
                                     :short_doc=>"A test non-command method.",
                                     :signature=>"def non_command",
                                     :tags=>[],
                                     :title=>"UtilTestModule#non_command",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A basic test command",
                                     :name=>:test_command,
                                     :parameters=>[],
                                     :path=>"UtilTestModule.test_command",
                                     :scope=>:class,
                                     :short_doc=>"A basic test command.",
                                     :signature=>"def self.test_command",
                                     :tags=>[],
                                     :title=>"UtilTestModule.test_command",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"",
                                     :name=>:test_command_no_docs,
                                     :parameters=>[],
                                     :path=>"UtilTestModule.test_command_no_docs",
                                     :scope=>:class,
                                     :short_doc=>"",
                                     :signature=>"def self.test_command_no_docs",
                                     :tags=>[],
                                     :title=>"UtilTestModule.test_command_no_docs",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with one arg",
                                     :name=>:test_command_with_arg,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_arg",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_with_arg",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with one arg.",
                                     :signature=>"def self.test_command_with_arg(test_arg)",
                                     :tags=>
                                         [{:name=>"test_arg",
                                           :tag_name=>"param",
                                           :text=>"a test argument",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_with_arg",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with an arg named arg",
                                     :name=>:test_command_arg_named_arg,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test argument whose parameter name is arg",
                                           :doc_type=>"String",
                                           :param_name=>"arg",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_arg_named_arg",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with an arg named arg.",
                                     :signature=>"def self.test_command_arg_named_arg(arg)",
                                     :tags=>
                                         [{:name=>"arg",
                                           :tag_name=>"param",
                                           :text=>"a test argument whose parameter name is arg",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_arg_named_arg",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with two args",
                                     :name=>:test_command_with_args,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_arg",
                                           :required=>true},
                                          {:default=>nil,
                                           :doc=>"another test argument",
                                           :doc_type=>"String",
                                           :param_name=>"another_test_arg",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_with_args",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with two args.",
                                     :signature=>
                                         "def self.test_command_with_args(test_arg, another_test_arg)",
                                     :tags=>
                                         [{:name=>"test_arg",
                                           :tag_name=>"param",
                                           :text=>"a test argument",
                                           :types=>["String"]},
                                          {:name=>"another_test_arg",
                                           :tag_name=>"param",
                                           :text=>"another test argument",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_with_args",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with an optional argument",
                                     :name=>:test_command_with_options,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_arg",
                                           :required=>true},
                                          {:default=>"option_default",
                                           :doc=>"an optional test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_option",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_with_options",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with an optional argument.",
                                     :signature=>
                                         "def self.test_command_with_options(test_arg, test_option='option_default')",
                                     :tags=>
                                         [{:name=>"test_arg",
                                           :tag_name=>"param",
                                           :text=>"a test argument",
                                           :types=>["String"]},
                                          {:name=>"test_option",
                                           :tag_name=>"param",
                                           :text=>"an optional test argument",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_with_options",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with all optional arguments",
                                     :name=>:test_command_all_options,
                                     :parameters=>
                                         [{:default=>"test_arg_default",
                                           :doc=>"an optional test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_arg",
                                           :required=>false},
                                          {:default=>"test_option_default",
                                           :doc=>"another optional test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_option",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_all_options",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with all optional arguments.",
                                     :signature=>
                                         "def self.test_command_all_options(test_arg='test_arg_default', test_option='test_option_default')",
                                     :tags=>
                                         [{:name=>"test_arg",
                                           :tag_name=>"param",
                                           :text=>"an optional test argument",
                                           :types=>["String"]},
                                          {:name=>"test_option",
                                           :tag_name=>"param",
                                           :text=>"another optional test argument",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_all_options",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with an options array",
                                     :name=>:test_command_options_arr,
                                     :parameters=>
                                         [{:default=>"test_option_default",
                                           :doc=>"an optional test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_option",
                                           :required=>false},
                                          {:default=>nil,
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"*test_options",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_options_arr",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with an options array.",
                                     :signature=>"def self.test_command_options_arr (",
                                     :tags=>
                                         [{:name=>"test_option",
                                           :tag_name=>"param",
                                           :text=>"an optional test argument",
                                           :types=>["String"]},
                                          {:name=>"test_options",
                                           :tag_name=>"param",
                                           :text=>"an optional array of arguments",
                                           :types=>["Array"]}],
                                     :title=>"UtilTestModule.test_command_options_arr",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with a return argument",
                                     :name=>:test_command_with_return,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test argument",
                                           :doc_type=>"String",
                                           :param_name=>"test_arg",
                                           :required=>true},
                                          {:default=>1,
                                           :doc=>"an optional test argument which happens to be an Integer",
                                           :doc_type=>"Integer",
                                           :param_name=>"test_option_int",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_with_return",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with a return argument.",
                                     :signature=>
                                         "def self.test_command_with_return(test_arg, test_option_int=1)",
                                     :tags=>
                                         [{:name=>"test_arg",
                                           :tag_name=>"param",
                                           :text=>"a test argument",
                                           :types=>["String"]},
                                          {:name=>"test_option_int",
                                           :tag_name=>"param",
                                           :text=>"an optional test argument which happens to be an Integer",
                                           :types=>["Integer"]},
                                          {:name=>nil,
                                           :tag_name=>"return",
                                           :text=>"an array including both params if test_option_int != 1",
                                           :types=>["Array"]},
                                          {:name=>nil,
                                           :tag_name=>"return",
                                           :text=>"a the first param if test_option_int == 1",
                                           :types=>["String"]}],
                                     :title=>"UtilTestModule.test_command_with_return",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>
                                         "A test_command with a Timestamp argument and an unnecessarily long description which should overflow when\nit tries to line up with other descriptions.\n\nsome more stuff",
                                     :name=>:test_command_arg_timestamp,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"a test Timestamp argument",
                                           :doc_type=>"Timestamp",
                                           :param_name=>"test_time",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_arg_timestamp",
                                     :scope=>:class,
                                     :short_doc=>
                                         "A test_command with a Timestamp argument and an unnecessarily long description which should overflow when\nit tries to line up with other descriptions.",
                                     :signature=>"def self.test_command_arg_timestamp(test_time)",
                                     :tags=>
                                         [{:name=>"test_time",
                                           :tag_name=>"param",
                                           :text=>"a test Timestamp argument",
                                           :types=>["Timestamp"]},
                                          {:name=>nil,
                                           :tag_name=>"return",
                                           :text=>"a hash including the given argument",
                                           :types=>["Hash"]}],
                                     :title=>"UtilTestModule.test_command_arg_timestamp",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with a Boolean argument",
                                     :name=>:test_command_arg_false,
                                     :parameters=>
                                         [{:default=>false,
                                           :doc=>"a test Boolean argument",
                                           :doc_type=>"Boolean",
                                           :param_name=>"test_flag",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_arg_false",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with a Boolean argument.",
                                     :signature=>"def self.test_command_arg_false(test_flag=false)",
                                     :tags=>
                                         [{:name=>"test_flag",
                                           :tag_name=>"param",
                                           :text=>"a test Boolean argument",
                                           :types=>["Boolean"]},
                                          {:name=>nil,
                                           :tag_name=>"return",
                                           :text=>"the flag passed in",
                                           :types=>["Boolean"]}],
                                     :title=>"UtilTestModule.test_command_arg_false",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with an array argument",
                                     :name=>:test_command_arg_arr,
                                     :parameters=>
                                         [{:default=>[],
                                           :doc=>"an Array test argument",
                                           :doc_type=>"Array",
                                           :param_name=>"test_arr",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_arg_arr",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with an array argument.",
                                     :signature=>"def self.test_command_arg_arr(test_arr=[])",
                                     :tags=>
                                         [{:name=>"test_arr",
                                           :tag_name=>"param",
                                           :text=>"an Array test argument",
                                           :types=>["Array"]}],
                                     :title=>"UtilTestModule.test_command_arg_arr",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with an Hash argument",
                                     :name=>:test_command_arg_hash,
                                     :parameters=>
                                         [{:default=>{},
                                           :doc=>"a Hash test argument",
                                           :doc_type=>"Hash",
                                           :param_name=>"test_hash",
                                           :required=>false}],
                                     :path=>"UtilTestModule.test_command_arg_hash",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with an Hash argument.",
                                     :signature=>"def self.test_command_arg_hash(test_hash={})",
                                     :tags=>
                                         [{:name=>"test_hash",
                                           :tag_name=>"param",
                                           :text=>"a Hash test argument",
                                           :types=>["Hash"]}],
                                     :title=>"UtilTestModule.test_command_arg_hash",
                                     :type=>:method,
                                     :visibility=>:public},
                                    {:full_doc=>"A test_command with several mixed options",
                                     :name=>:test_command_mixed_options,
                                     :parameters=>
                                         [{:default=>nil,
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"test_arg",
                                           :required=>true},
                                          {:default=>[],
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"test_arr",
                                           :required=>false},
                                          {:default=>"test_opt_arg",
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"test_opt",
                                           :required=>false},
                                          {:default=>{},
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"test_hsh",
                                           :required=>false},
                                          {:default=>true,
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"test_bool",
                                           :required=>false},
                                          {:default=>nil,
                                           :doc=>"",
                                           :doc_type=>"",
                                           :param_name=>"*test_rest",
                                           :required=>true}],
                                     :path=>"UtilTestModule.test_command_mixed_options",
                                     :scope=>:class,
                                     :short_doc=>"A test_command with several mixed options.",
                                     :signature=>
                                         "def self.test_command_mixed_options(test_arg, test_arr=[], test_opt='test_opt_arg', test_hsh={}, test_bool=true, *test_rest)",
                                     :tags=>[],
                                     :title=>"UtilTestModule.test_command_mixed_options",
                                     :type=>:method,
                                     :visibility=>:public}],
                               :full_doc=>
                                   "A command module used for testing\n\nThis module contains most of the test case input methods.",
                               :module_name=>:UtilTestModule,
                               :path=>"UtilTestModule",
                               :short_doc=>"A command module used for testing.",
                               :type=>:module,
                               :visibility=>:public},
                          :source=>
                              "require \"\#{File.expand_path(File.dirname(__FILE__))}/../../lib/rubycom.rb\"\n# A command module used for testing\n#\n#This module contains most of the test case input methods.\nmodule UtilTestModule\n\n  # A test non-command method\n  def non_command\n    puts 'fail'\n  end\n\n  # A basic test command\n  def self.test_command\n    puts 'command test'\n  end\n\n  def self.test_command_no_docs\n    puts 'command test'\n  end\n\n  # A test_command with one arg\n  #\n  # @param [String] test_arg a test argument\n  def self.test_command_with_arg(test_arg)\n    \"test_arg=\#{test_arg}\"\n  end\n\n  # A test_command with an arg named arg\n  #\n  # @param [String] arg a test argument whose parameter name is arg\n  def self.test_command_arg_named_arg(arg)\n    \"arg=\#{arg}\"\n  end\n\n  # A test_command with two args\n  # @param [String] test_arg a test argument\n  # @param [String] another_test_arg another test argument\n  def self.test_command_with_args(test_arg, another_test_arg)\n    puts \"test_arg=\#{test_arg},another_test_arg=\#{another_test_arg}\"\n  end\n\n  # A test_command with an optional argument\n  # @param [String] test_arg a test argument\n  # @param [String] test_option an optional test argument\n  def self.test_command_with_options(test_arg, test_option='option_default')\n    puts \"test_arg=\#{test_arg},test_option=\#{test_option}\"\n  end\n\n  # A test_command with all optional arguments\n  # @param [String] test_arg an optional test argument\n  # @param [String] test_option another optional test argument\n  def self.test_command_all_options(test_arg='test_arg_default', test_option='test_option_default')\n    puts \"Output is test_arg=\#{test_arg},test_option=\#{test_option}\"\n  end\n\n  # A test_command with an options array\n  # @param [String] test_option an optional test argument\n  # @param [Array] test_options an optional array of arguments\n  def self.test_command_options_arr (\n      test_option='test_option_default',\n          *test_options\n  )\n    puts \"Output is test_option=\#{test_option},test_option_arr=\#{test_options}\"\n  end\n\n  # A test_command with a return argument\n  #\n  # @param [String] test_arg a test argument\n  # @param [Integer] test_option_int an optional test argument which happens to be an Integer\n  # @return [Array] an array including both params if test_option_int != 1\n  # @return [String] a the first param if test_option_int == 1\n  def self.test_command_with_return(test_arg, test_option_int=1)\n    ret = [test_arg, test_option_int]\n    if test_option_int == 1\n      ret = test_arg\n    end\n    ret\n  end\n\n  # A test_command with a Timestamp argument and an unnecessarily long description which should overflow when\n  # it tries to line up with other descriptions.\n  #\n  # some more stuff\n  #\n  # @param [Timestamp] test_time a test Timestamp argument\n  # @return [Hash] a hash including the given argument\n  def self.test_command_arg_timestamp(test_time)\n    {test_time: test_time}\n  end\n\n  # A test_command with a Boolean argument\n  # @param [Boolean] test_flag a test Boolean argument\n  # @return [Boolean] the flag passed in\n  def self.test_command_arg_false(test_flag=false)\n    test_flag\n  end\n\n  # A test_command with an array argument\n  #\n  # @param [Array] test_arr an Array test argument\n  def self.test_command_arg_arr(test_arr=[])\n    test_arr\n  end\n\n  # A test_command with an Hash argument\n  # @param [Hash] test_hash a Hash test argument\n  def self.test_command_arg_hash(test_hash={})\n    test_hash\n  end\n\n  # A test_command with several mixed options\n  def self.test_command_mixed_options(test_arg, test_arr=[], test_opt='test_opt_arg', test_hsh={}, test_bool=true, *test_rest)\n    \"test_arg=\#{test_arg} test_arr=\#{test_arr} test_opt=\#{test_opt} test_hsh=\#{test_hsh} test_bool=\#{test_bool} test_rest=\#{test_rest}\"\n  end\n\n  include Rubycom\nend\n",
                          :type=>:module},
                     :UtilTestNoSingleton=>
                         {:documentation=>{:full_doc=>"", :short_doc=>""},
                          :source=>"",
                          :type=>:module},
                     :test_composite_command=>
                         {:documentation=>
                              {:full_doc=>"A test_command in a composite console",
                               :name=>:test_composite_command,
                               :parameters=>
                                   [{:default=>nil,
                                     :doc=>"a test argument",
                                     :doc_type=>"String",
                                     :param_name=>"test_arg",
                                     :required=>true}],
                               :path=>"::test_composite_command",
                               :scope=>:class,
                               :short_doc=>"A test_command in a composite console.",
                               :signature=>"def self.test_composite_command(test_arg)",
                               :tags=>
                                   [{:name=>"test_arg",
                                     :tag_name=>"param",
                                     :text=>"a test argument",
                                     :types=>["String"]},
                                    {:name=>nil,
                                     :tag_name=>"return",
                                     :text=>"the test arg",
                                     :types=>["String"]}],
                               :title=>"::test_composite_command",
                               :type=>:method,
                               :visibility=>:public},
                          :source=>
                              "# A test_command in a composite console\n#\n# @param [String] test_arg a test argument\n# @return [String] the test arg\n  def self.test_composite_command(test_arg)\n    test_arg\n  end\n",
                          :type=>:command}}}
    assert_equal(expected, result)
  end

end
